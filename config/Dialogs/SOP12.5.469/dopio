// Magic: 17aaa0f2
// Automatically generated PSI dialog (PSI version 12.5.469)
// Mon Sep 23 18:39:37 2013


f_tmp = FLOAT_FIELD;	// dialog.top.ui

loadfromdisk.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("loadfromdisk", "Load from Disk") toggle VALUE(loadfromdisk.val);

}

file.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 file.label = PARM_LABEL("Geometry File", "file") WIDTH(1.5);

 PARM_FIELD (pathstring, "file") LABELREF(file.label)
	VALUE(file.val) HSTRETCH;

 file.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(file.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

doppath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 doppath.label = PARM_LABEL("DOP Network", "doppath") WIDTH(1.5);
 PARM_FIELD(pathstring, "doppath") VALUE(doppath.val) 
	LABELREF(doppath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(doppath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(doppath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;
}

dopnode.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 dopnode.label = PARM_LABEL("DOP Node", "dopnode") WIDTH(1.5);
 PARM_FIELD(pathstring, "dopnode") VALUE(dopnode.val) 
	LABELREF(dopnode.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(dopnode.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(dopnode.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;
}

defobj.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    defobj.label = PARM_LABEL("Default Object", "defobj") WIDTH(1.5);
    PARM_FIELD(string, "defobj") VALUE(defobj.val) 
	LABELREF(defobj.label) HSTRETCH;

}

doposxform.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("doposxform", "Transform Geometry With Position Data") toggle VALUE(doposxform.val);

}

doxform.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("doxform", "Transform Geometry With Geometry Data") toggle VALUE(doxform.val);

}

computeminmax.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("computeminmax", "Compute Min/Max Values") toggle VALUE(computeminmax.val);

}

importsimsettings.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("importsimsettings", "Import Simulation Settings") toggle VALUE(importsimsettings.val);

}

presets.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Presets", "presets") WIDTH(1.5);
    { WIDTH(0.09) }

    presets.menu;

}

fields.parm =
{
    LAYOUT(horizontal) SPACING(0.02) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Fields to Import", "fields") WIDTH(1.5);
    { WIDTH(0.08) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center)  VALUE(fields.val)

        fields.field = PARM_FIELD (integer, "fields")
				VALUE(fields.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(fields.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(fields.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(fields.clear.val);
    }

    { HSTRETCH }
}

fields.multilist = 
{
    LAYOUT(vertical) STRETCH MARGIN(0.05)
}

fields.gad =
{
    LAYOUT(vertical) STRETCH SPACING(0.02)

    fields.parm;
    fields.multilist;
}

delete_attributes.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    delete_attributes.label = PARM_LABEL("Attributes to Delete", "delete_attributes") WIDTH(1.5);
    PARM_FIELD(string, "delete_attributes") VALUE(delete_attributes.val) 
	LABELREF(delete_attributes.label) HSTRETCH;

}

attribute_numcasts.parm =
{
    LAYOUT(horizontal) SPACING(0.02) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Attributes to Cast", "attribute_numcasts") WIDTH(1.5);
    { WIDTH(0.08) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center)  VALUE(attribute_numcasts.val)

        attribute_numcasts.field = PARM_FIELD (integer, "attribute_numcasts")
				VALUE(attribute_numcasts.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(attribute_numcasts.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(attribute_numcasts.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(attribute_numcasts.clear.val);
    }

    { HSTRETCH }
}

attribute_numcasts.multilist = 
{
    LAYOUT(vertical) STRETCH MARGIN(0.05)
}

attribute_numcasts.gad =
{
    LAYOUT(vertical) STRETCH SPACING(0.02)

    attribute_numcasts.parm;
    attribute_numcasts.multilist;
}

compression.parm =
{
    LAYOUT(horizontal) SPACING(0.02) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Fields to Compress", "compression") WIDTH(1.5);
    { WIDTH(0.08) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center)  VALUE(compression.val)

        compression.field = PARM_FIELD (integer, "compression")
				VALUE(compression.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(compression.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(compression.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(compression.clear.val);
    }

    { HSTRETCH }
}

compression.multilist = 
{
    LAYOUT(vertical) STRETCH MARGIN(0.05)
}

compression.gad =
{
    LAYOUT(vertical) STRETCH SPACING(0.02)

    compression.parm;
    compression.multilist;
}
execute.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

execute.gad = ROW
{

    PARM_BUTTON("execute", "Render") push VALUE(execute.val);
}

renderdialog.gad = ROW
{

    { WIDTH(0) }
    { WIDTH(0.1) }

    PARM_BUTTON("renderdialog", "Render Control...") push VALUE(renderdialog.val);
}
}	// Template join.bot


trange.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Valid Frame Range", "trange") WIDTH(1.5);
    { WIDTH(0.09) }

    trange.menu;

}

f.gad = ROW
{
   HSTRETCH

   f.label = PARM_LABEL("Start/End/Inc", "f") WIDTH(1.5);

   PARM(float, 3, "f", none, none, "#1,#2,#3") LABELREF(f.label)
	HSTRETCH;

}

take.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Render With Take", "take") WIDTH(1.5);
    { WIDTH(0.09) }

    take.menu;

}

xformtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Transform", "xformtype") WIDTH(1.5);
    { WIDTH(0.09) }

    xformtype.menu;

}

mkpath.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("mkpath", "Create Intermediate Directories") toggle VALUE(mkpath.val);

}

initsim.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("initsim", "Initialize Simulation OPs") toggle VALUE(initsim.val);

}

alfprogress.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("alfprogress", "Alfred Style Progress") toggle VALUE(alfprogress.val);

}

reportnetwork.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("reportnetwork", "Report Network Use") toggle VALUE(reportnetwork.val);

}

saveretry.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 saveretry.label = PARM_LABEL("Save Retries", "saveretry") WIDTH(1.5);
 PARM(integer, 1, "saveretry", none, none) RANGE(0,5)
	LOCK_RANGE_MIN LABELREF(saveretry.label) HSTRETCH;

}

savebackground.gad = ROW
{

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("savebackground", "Save in Background") toggle VALUE(savebackground.val);

}
tprerender.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tprerender.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tprerender.gad = PARM_BUTTON("tprerender", "") toggle VALUE(tprerender.val);

prerender.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 prerender.label = PARM_LABEL("Pre-Render Script", "prerender") WIDTH(1.27);

 PARM_FIELD (pathstring, "prerender") LABELREF(prerender.label)
	VALUE(prerender.val) HSTRETCH;

 prerender.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(prerender.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}
}	

lprerender.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    lprerender.menu;

}
}	// Template join.bot

tpreframe.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tpreframe.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tpreframe.gad = PARM_BUTTON("tpreframe", "") toggle VALUE(tpreframe.val);

preframe.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 preframe.label = PARM_LABEL("Pre-Frame Script", "preframe") WIDTH(1.27);

 PARM_FIELD (pathstring, "preframe") LABELREF(preframe.label)
	VALUE(preframe.val) HSTRETCH;

 preframe.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(preframe.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}
}	

lpreframe.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    lpreframe.menu;

}
}	// Template join.bot

tpostframe.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tpostframe.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tpostframe.gad = PARM_BUTTON("tpostframe", "") toggle VALUE(tpostframe.val);

postframe.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 postframe.label = PARM_LABEL("Post-Frame Script", "postframe") WIDTH(1.27);

 PARM_FIELD (pathstring, "postframe") LABELREF(postframe.label)
	VALUE(postframe.val) HSTRETCH;

 postframe.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(postframe.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}
}	

lpostframe.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    lpostframe.menu;

}
}	// Template join.bot

tpostrender.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
tpostrender.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

tpostrender.gad = PARM_BUTTON("tpostrender", "") toggle VALUE(tpostrender.val);

postrender.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 postrender.label = PARM_LABEL("Post-Render Script", "postrender") WIDTH(1.27);

 PARM_FIELD (pathstring, "postrender") LABELREF(postrender.label)
	VALUE(postrender.val) HSTRETCH;

 postrender.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(postrender.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}
}	

lpostrender.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)

    lpostrender.menu;

}
}	// Template join.bot


folder1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder1.gad.val) STRETCH(1,0)

	TAB "Fields"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    fields.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Compression"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(2p) SPACING(2p)
	    delete_attributes.gad;		
	    attribute_numcasts.gad;		
	    compression.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Import from DOPs"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    doppath.gad;		
	    dopnode.gad;		
	    defobj.gad;		
	    doposxform.gad;		
	    doxform.gad;		
	    computeminmax.gad;		
	    importsimsettings.gad;		
	    presets.gad;		
	    folder1.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Export to File"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    execute.row.join;		
	    trange.gad;		
	    f.gad;		
	    take.gad;		
	    xformtype.gad;		
	    mkpath.gad;		
	    initsim.gad;		
	    alfprogress.gad;		
	    reportnetwork.gad;		
	    saveretry.gad;		
	    savebackground.gad;		
	    tprerender.row.join;		
	    tpreframe.row.join;		
	    tpostframe.row.join;		
	    tpostrender.row.join;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    loadfromdisk.gad; 
    file.gad; 
    folder0.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
